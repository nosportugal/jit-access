# On-Demand Scanning: https://cloud.google.com/artifact-analysis/docs/ods-cloudbuild

substitutions:
  _IMAGE_NAME: "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/registry/${REPO_NAME}"
  _SEVERITY: '(CRITICAL|HIGH)'
timeout: 900s
steps:
  # Build image
  - id: "build"
    dir: "sources"
    name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "${_IMAGE_NAME}", "."]
    waitFor: ["-"] # immediately

  # Run a vulnerability scan
  - id: "scan"
    dir: "sources"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud artifacts docker images scan ${_IMAGE_NAME} \
        --format='value(response.scan)' > /workspace/scan_id.txt
    waitFor: ["build"]

  # Check vulnerability severity
  - id: "severity-check"
    dir: "sources"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud artifacts docker images list-vulnerabilities  $(cat /workspace/scan_id.txt) \
        --format='value(vulnerability.effectiveSeverity,vulnerability.fixAvailable)' | if  grep -Pq "${_SEVERITY}\tTrue"; \
        then echo 'Failed vulnerability check' && exit 1; \
        else echo "No fixable critical or high severity found" && exit 0; fi
    waitFor: ["scan"]

  # Retag image to match release tag
  - id: "retag"
    dir: "sources"
    name: "gcr.io/cloud-builders/docker"
    args: ["tag", "${_IMAGE_NAME}", "${_IMAGE_NAME}:${TAG_NAME}"]
    waitFor: ["severity-check"]

  # Push to artifact registry
  - id: "push"
    dir: "sources"
    name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_IMAGE_NAME}:${TAG_NAME}"]
    waitFor: ["retag"]

  # Sign image
  - id: "create-attestation"
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: /bin/bash
    args:
      - -c
      - |
        docker pull "${_IMAGE_NAME}:${TAG_NAME}" \
        && gcloud beta container binauthz attestations sign-and-create \
        --attestor="${_ATTESTOR_ID}" \
        --artifact-url="$(docker inspect "${_IMAGE_NAME}:${TAG_NAME}" --format='{{index .RepoDigests 0}}')" \
        --keyversion="${_KEY_VERSION_ID}"
    waitFor: ["push"]

images:
  - "${_IMAGE_NAME}:${TAG_NAME}"

options:
  logging: CLOUD_LOGGING_ONLY
  dynamic_substitutions: true
